name: Automated test suite

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test-python:
    # Reserved multicore instance for running tests
    runs-on:
      group: Beefy runners

    # Only run the action for the latest push
    # Include web3-version in concurrency group to prevent cross-contamination
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ matrix.python-version }}-${{ matrix.web3-version }}
      cancel-in-progress: true

    strategy:
      fail-fast: false
      matrix:
        # for now let's keep the 3.13 aside as many of the modules don't support it yet
        # The project is developed using 3.12. 3.10 has some encoding issues which is causing some tests to fail
        python-version: ["3.11", "3.12"]
        web3-version: ["6", "7"]

    name: Python ${{ matrix.python-version }} - Web3.py v${{ matrix.web3-version }}

    # Set environment variables to create unique virtual environments
    env:
      # Create a unique virtual environment name for each matrix combination
      POETRY_VENV_PATH: .venv-py${{ matrix.python-version }}-web3v${{ matrix.web3-version }}
      # Alternative approach: use different cache directories
      POETRY_CACHE_DIR: ~/.cache/pypoetry-py${{ matrix.python-version }}-web3v${{ matrix.web3-version }}

    steps:
      # TODO: we only need contracts/aave-v3-deploy for tests
      # but there does not seem to be an option to choose which submodules to checkout
      # https://github.com/actions/checkout
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          # npm version need to support aave-deploy
          node-version: 18
          cache: "npm"
          cache-dependency-path: contracts/aave-v3-deploy/package-lock.json

      # pnpm needed to compile Enzyme
      # We need version 7 to be exact.
      - name: Install pnpm
        run: |
          curl -fsSL https://get.pnpm.io/install.sh | env PNPM_VERSION=7.27.1 sh -
          PNPM_HOME="/home/runner/.local/share/pnpm"
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#adding-a-system-path
          echo $PNPM_HOME >> $GITHUB_PATH

      # Poetry 2.0 breaks everything
      # https://github.com/python-poetry/poetry/blob/main/CHANGELOG.md
      - name: Install poetry
        run: pipx install "poetry<2"

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          # Re-enable cache since we now have unique environments
          cache: "poetry"
          cache-dependency-path: poetry.lock

      # Create completely separate project directories for each matrix combination
      - name: Create isolated workspace for this matrix combination
        run: |
          # Create a unique workspace directory for this specific combination
          WORKSPACE_DIR="${GITHUB_WORKSPACE}_py${{ matrix.python-version }}_web3v${{ matrix.web3-version }}"
          echo "Creating isolated workspace at: $WORKSPACE_DIR"
          
          # Copy the entire project to the new workspace
          cp -r "$GITHUB_WORKSPACE" "$WORKSPACE_DIR"
          
          # Move into the isolated workspace
          cd "$WORKSPACE_DIR"
          
          # Modify the project name to force Poetry to create a unique environment
          sed -i 's/name = "web3-ethereum-defi"/name = "web3-ethereum-defi-py${{ matrix.python-version }}-web3v${{ matrix.web3-version }}"/' pyproject.toml
          
          # Store the workspace path for subsequent steps
          echo "ISOLATED_WORKSPACE=$WORKSPACE_DIR" >> $GITHUB_ENV
          
          # Verify the modification worked
          echo "Modified project name:"
          grep '^name = ' pyproject.toml
          
          echo "Workspace isolation complete. All subsequent steps will run in: $WORKSPACE_DIR"

      # Install dependencies in the isolated workspace
      - name: Install dependencies
        working-directory: ${{ env.ISOLATED_WORKSPACE }}
        run: |
          echo "Installing dependencies in isolated workspace for Python ${{ matrix.python-version }} with Web3.py v${{ matrix.web3-version }}"
          echo "Current directory: $(pwd)"
          echo "Project name from pyproject.toml:"
          grep '^name = ' pyproject.toml
          
          # Install base dependencies first
          poetry install
          
          # Then install version-specific extras
          if [ "${{ matrix.web3-version }}" = "6" ]; then
            echo "Installing Web3.py v6 specific dependencies"
            poetry install -E docs -E data -E test -E hypersync -E web3v6
          else
            echo "Installing Web3.py v7 specific dependencies"
            poetry install -E docs -E data -E test -E hypersync -E web3v7
          fi

      - name: Install Ganache
        run: yarn global add ganache

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          # pick a nightly release from: https://github.com/foundry-rs/foundry/releases
          # version: "nightly-de33b6af53005037b463318d2628b5cfcaf39916"
          #version: "nightly-fdd321bac95f0935529164a88faf99d4d5cfa321"
          version: "v1.2.3"

      # We also work around race condition for setting up Aave NPM packages.
      - name: Setup Aave v3 for tests
        working-directory: ${{ env.ISOLATED_WORKSPACE }}
        run: |
          poetry run install-aave-for-testing

      # We also work around race condition for setting up Aave NPM packages.
      - name: Build needed contracts
        working-directory: ${{ env.ISOLATED_WORKSPACE }}
        run: |
          pnpm --version
      # Broken with the latest foudry?
      # make guard in-house safe-integration

      # Lagoon source deployment needs soldeer
      - name: Lagoon dependency issue smoke test
        working-directory: ${{ env.ISOLATED_WORKSPACE }}
        run: |
          export PATH="$HOME/.cargo/bin:$PATH"
          (cd contracts/lagoon-v0 && forge soldeer install)
          ls -lha contracts/lagoon-v0/dependencies/
          ls -lha contracts/lagoon-v0/dependencies/@openzeppelin-contracts-upgradeable-5.0.0/

      # Verify we have the correct Web3.py version installed
      - name: Verify Web3.py version and virtual environment
        working-directory: ${{ env.ISOLATED_WORKSPACE }}
        run: |
          echo "=== Workspace Information ==="
          echo "Working directory: $(pwd)"
          echo "Project name:"
          grep '^name = ' pyproject.toml
          echo "=== Virtual Environment Information ==="
          poetry env info
          echo "=== Python Path ==="
          poetry run python -c "import sys; print('Python executable:', sys.executable)"
          echo "=== Web3.py Version ==="
          poetry run python -c "import web3; print(f'Web3.py version: {web3.__version__}')"
          echo "=== Installed packages related to web3 ==="
          poetry run pip list | grep -E "(web3|eth-)"
          echo "=== Environment Uniqueness Check ==="
          echo "This should be unique for each matrix combination:"
          poetry run python -c "import os; print(f'Virtual environment: {os.environ.get(\"VIRTUAL_ENV\", \"Not set\")}')"

      # Setup Debug Session before tests - Enable this when you need to debug test issues
      # - name: Setup Debug Session Before Tests
      #   uses: csexton/debugger-action@master

      - name: Setup tmate session for debugging
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true
        if: ${{ failure() || github.event.inputs.debug == 'true' }}

      - name: Run tests (parallel)
        working-directory: ${{ env.ISOLATED_WORKSPACE }}
        run: |
          echo "Running tests in isolated workspace: $(pwd)"
          echo "Testing Python ${{ matrix.python-version }} with Web3.py v${{ matrix.web3-version }}"
          # Verify we're in the right environment before running tests
          poetry run python -c "import web3; print(f'About to run tests with Web3.py version: {web3.__version__}')"
          
          # Enable verbose output if debugging is enabled
          if [ "$ENABLE_VERBOSE_LOGGING" = "true" ]; then
            poetry run pytest --tb=native -n auto -v -s --capture=no
          else
            poetry run pytest --tb=native -n auto
          fi
        env:
          BNB_CHAIN_JSON_RPC: ${{ secrets.BNB_CHAIN_JSON_RPC }}
          JSON_RPC_POLYGON_ARCHIVE: ${{ secrets.JSON_RPC_POLYGON_ARCHIVE }}
          JSON_RPC_POLYGON: ${{ secrets.JSON_RPC_POLYGON }}
          JSON_RPC_ETHEREUM: ${{ secrets.JSON_RPC_ETHEREUM }}
          JSON_RPC_BASE: ${{ secrets.JSON_RPC_BASE }}
          JSON_RPC_BINANCE: ${{ secrets.JSON_RPC_BINANCE }}
          ETHEREUM_JSON_RPC: ${{ secrets.JSON_RPC_ETHEREUM }}
          GOOGLE_CLOUD_PROJECT: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
          GOOGLE_CLOUD_REGION: ${{ secrets.GOOGLE_CLOUD_REGION }}
          KEY_RING: ${{ secrets.KEY_RING }}
          KEY_NAME: ${{ secrets.KEY_NAME }}
          GCP_ADC_CREDENTIALS_STRING: ${{ secrets.GCP_ADC_CREDENTIALS_STRING }}
          TOKEN_RISK_API_KEY: ${{ secrets.TOKEN_RISK_API_KEY }}


      - name: Ruff lint check
        working-directory: ${{ env.ISOLATED_WORKSPACE }}
        run: |
          poetry run ruff format --check --diff
        # Only run linting once (on the newest Python with latest web3.py)
        if: "matrix.python-version == '3.12' && matrix.web3-version == '7'"