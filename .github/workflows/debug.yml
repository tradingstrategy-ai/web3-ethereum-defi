name: Debug test suits

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test-python:

    # Reserved multicore instance for running tests
    runs-on:
      group: Beefy runners

    # Only run the action for the latest push
    # See https://docs.github.com/en/actions/using-jobs/using-concurrency#example-only-cancel-in-progress-jobs-or-runs-for-the-current-workflow
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ matrix.python-version }}-${{ matrix.web3-version }}
      cancel-in-progress: true

    strategy:
      fail-fast: false
      matrix:
        # for now let's keep the 3.13 aside as many of the modules don't support it yet
        # The project is developed using 3.12. 3.10 has some encoding issues which is causing some tests to fail
        python-version: ["3.12"]
        web3-version: ["6", "7"]

    name: Python ${{ matrix.python-version }} - Web3.py v${{ matrix.web3-version }}

    steps:
      # TODO: we only need contracts/aave-v3-deploy for tests
      # but there does not seem to be an option to choose which submodules to checkout
      # https://github.com/actions/checkout
      - uses: actions/checkout@v3
        with:
          submodules: true

      # Poetry 2.0 breaks everything
      # https://github.com/python-poetry/poetry/blob/main/CHANGELOG.md
      - name: Install poetry
        run: pipx install "poetry<2"

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "poetry"

      - name: Install dependencies
        run: |
          poetry env use '${{ matrix.python-version }}'
          # this will try to install both web3v6 & web3v7 deps eventually end up with web3v7 deps
          # poetry install --all-extras
          poetry install
          

      - name: Install specific Web3.py version
        run: |
          if [ "${{ matrix.web3-version }}" = "6" ]; then
             poetry install -E docs -E data -E test -E hypersync -E web3v6
             poetry run pip install -r requirements_v6.txt
             # poetry run pip install -e ".[web3v6]"
             # poetry run pip install "web3>=6.14.0,<7.0.0"
             # poetry run pip install "web3[tester]==6.14.0"
             # poetry run pip install "evm-trace==0.1.0a17"
             # poetry run pip install "safe-eth-py==6.0.0b42"
             # poetry run pip install "eth-pydantic-types<0.2"
             # poetry run pip install "multicall>=0.9.0,<0.10.0"
             poetry run pip freeze
          else
             poetry install -E docs -E data -E test -E hypersync -E web3v7
             poetry run pip install -r requirements_v7.txt
             # poetry run pip install -e ".[web3v7]"
             # poetry run pip install "web3>=7.12.0,<8.0.0"
             # poetry run pip install "web3[tester]>=7.12.0"
             # poetry run pip install "evm-trace>=0.2.6"
             # poetry run pip install "safe-eth-py>=7.5.1"
             # poetry run pip install "eth-pydantic-types>=0.2.0"
             # poetry run pip install "multicall>=0.12.3"
             poetry run pip freeze
          fi

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          # pick a nightly release from: https://github.com/foundry-rs/foundry/releases
          # version: "nightly-de33b6af53005037b463318d2628b5cfcaf39916"
          #version: "nightly-fdd321bac95f0935529164a88faf99d4d5cfa321"
          version: "v1.2.3"


      - name: Verify Web3.py version
        run: |
          poetry run python -c "import web3; print(f'Web3.py version: {web3.__version__}')"

      - name: Run tests (parallel)
        run: |
          # Enable verbose output if debugging is enabled
          if [ "$ENABLE_VERBOSE_LOGGING" = "true" ]; then
            poetry run pytest --tb=native -n auto -v -s --capture=no
          else
            poetry run pytest --tb=native -n auto
          fi
        env:
          BNB_CHAIN_JSON_RPC: ${{ secrets.BNB_CHAIN_JSON_RPC }}
          JSON_RPC_POLYGON_ARCHIVE: ${{ secrets.JSON_RPC_POLYGON_ARCHIVE }}
          JSON_RPC_POLYGON: ${{ secrets.JSON_RPC_POLYGON }}
          JSON_RPC_ETHEREUM: ${{ secrets.JSON_RPC_ETHEREUM }}
          JSON_RPC_BASE: ${{ secrets.JSON_RPC_BASE }}
          JSON_RPC_BINANCE: ${{ secrets.JSON_RPC_BINANCE }}
          ETHEREUM_JSON_RPC: ${{ secrets.JSON_RPC_ETHEREUM }}
          GOOGLE_CLOUD_PROJECT: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
          GOOGLE_CLOUD_REGION: ${{ secrets.GOOGLE_CLOUD_REGION }}
          KEY_RING: ${{ secrets.KEY_RING }}
          KEY_NAME: ${{ secrets.KEY_NAME }}
          GCP_ADC_CREDENTIALS_STRING: ${{ secrets.GCP_ADC_CREDENTIALS_STRING }}

