[tool.poetry]
name = "web3-ethereum-defi"
version = "0.32"
description = "Integrate Ethereum Web3 and DeFi protocols into your Python application."
authors = ["Mikko Ohtamaa <mikko@tradingstrategy.ai>"]
license = "MIT"

homepage = "https://web3-ethereum-defi.readthedocs.io/"
repository = "https://github.com/tradingstrategy-ai/web3-ethereum-defi"
readme = "README.md"
keywords = ["uniswap", "aave", "gmx", "safe", "ethereum", "cryptocurrency", "erc-20", "pancakeswap", "bnb smart chain", "base", "web3", "blockchain", "avalanche", "arbitrum", "chainlink"]
packages = [
    { include = "eth_defi" },
]

# See PyPi for supported links https://github.com/pypi/warehouse/blob/main/warehouse/templates/packaging/detail.html
# https://stackoverflow.com/a/74394591/315168
# https://pypi.org/project/links-demo/
[tool.poetry.urls]
Changelog = "https://github.com/tradingstrategy-ai/web3-ethereum-defi/blob/master/CHANGELOG.md"
Documentation = "https://web3-ethereum-defi.readthedocs.io/"
Twitter = "https://twitter.com/tradingprotocol"
Youtube = "https://www.youtube.com/@tradingstrategyprotocol"
Discord = "https://discord.gg/5M88m9nM8H"
Sponsor = "https://tradingstrategy.ai"

[tool.poetry.dependencies]
python = ">=3.10,<4"

# https://github.com/apache/arrow/pull/35412
# Last checked 2023-07, still broken
urllib3 = ">=2"

psutil = "^5.9.0"
ujson = ">=5.8.0"
cachetools = ">=4"
futureproof = "^0.3.1"
setuptools = {version = ">=63,<=70"}
eth-bloom = "^2.0.0"
#evm-trace = "^0.2.6"
#web3 = {version = "^7.12.0", extras = ["tester"]}
tqdm-loggable = ">=0.1.3"
sigfig = "^1.3.2"
tqdm = {version = ">=4.66.1", optional = true}
# Some packages have still compatibility issues with Numpy 2.x release,
# too tired to deal with them now
numpy = {version = "<2", optional = true}
pandas = {version = ">=1.4", optional = true}


# Data
jupyter = {version = "^1.0.0", optional = true}
matplotlib = {version = ">=3.5", optional = true}
plotly = {version = ">=5.8.2", optional = true}
kaleido = {version = "^1.0.0", optional = true}
tenacity = {version = "*", optional = true} # Needed for Plotly
pyarrow = {version = "*", optional = true}
pytest-xdist = {version = "^3.3.1", optional = true}
gql = {extras = ["requests"], version = "^3.3.0", optional = true}
ffn = {version = "^1.1.2", optional = true}

# We are using evm-trace, so for compat
#eth-pydantic-types = {version = "^0.2.0"}

# web3-google-hsm = {git = "https://github.com/Ankvik-Tech-Labs/web3-google-hsm"}
web3-google-hsm = "^0.1.0"
pytz = "^2024.2"
# The project's python requirement is incompatible with eth_defi so for now use this fork
gmx-python-ng = "1.0.1"

# Docs
Sphinx = {version = "^4.5.0", optional = true}
sphinx-sitemap = {version = "^2.2.0", optional = true}
sphinx-autodoc-typehints = {version = "^1.16.0", optional = true}
nbsphinx = {version = "^0.8.9", optional = true}
sphinx-rtd-theme = {version = "^1.0.0", optional = true}
zope-dottedname = {version = "^6.0", optional = true}
furo = {version = "^2022.6.4.1", optional = true}
sphinxcontrib-applehelp = {version = "1.0.4", optional = true} # Version pindowns https://github.com/sphinx-doc/sphinxcontrib-applehelp/blob/master/CHANGES
sphinxcontrib-devhelp = {version = "1.0.2", optional = true} # Version pindowns https://github.com/sphinx-doc/sphinxcontrib-devhelp/blob/master/CHANGES
sphinxcontrib-htmlhelp = {version = "2.0.1", optional = true} # Version pindowns https://github.com/sphinx-doc/sphinxcontrib-htmlhelp/blob/master/CHANGES
sphinxcontrib-serializinghtml = {version = "1.1.5", optional = true} # Version pindowns https://github.com/sphinx-doc/sphinxcontrib-serializinghtml/blob/master/CHANGES
sphinxcontrib-qthelp = {version = "1.0.3", optional = true} # Version pindowns https://github.com/sphinx-doc/sphinxcontrib-qthelp/blob/master/CHANGES


# Removed
# Only soft dependency in tests, but RTD complains
# terms-of-service = {path = "contracts/terms-of-service", develop = true}
#multicall = "^0.12.3"
#safe-eth-py = "^7.5.1"
joblib = "^1.4.2"
base58 = "^2.1.1"

# HyperSync
hypersync = {version = "^0.8.5", optional = true}
# cherry-etl = "^0.5.1"

# The project is now migrating to web3py v7 while keeping the legacy support for v6. To make it compatible with v6 use these dependencies
# Conditional dependencies matrix based on extras
web3 = [
    {version = "^7.12.0", markers = "extra != 'web3v6'"},
    {version = "==6.14.0", markers = "extra == 'web3v6'"}
]

eth-tester = [
    {version = "*", markers = "extra != 'web3v6'"},
    {version = "*", markers = "extra == 'web3v6'"}
]

evm-trace = [
    {version = "^0.2.6", markers = "extra != 'web3v6'"},
    {version = "^0.1.0a17", markers = "extra == 'web3v6'"}
]

safe-eth-py = [
    {version = "^7.8.0", markers = "extra != 'web3v6'"},
    {version = "^6.0.0b42", markers = "extra == 'web3v6'"}
]

eth-pydantic-types = [
    {version = "^0.2.0", markers = "extra != 'web3v6'"},
    {version = "<0.2", markers = "extra == 'web3v6'"}
]

multicall = [
    {version = "^0.12.3", markers = "extra != 'web3v6'"},
    {version = "^0.9.0", markers = "extra == 'web3v6'"}
]
# Have to pin it to make web3py v6/v7 compatible
eth-account = [
    {version = "^0.13.7", markers = "extra != 'web3v6'"},
    {version = "^0.11.3", markers = "extra == 'web3v6'"}
]
eth-typing = [
    {version = "^5.2.1", markers = "extra != 'web3v6'"},
    {version = "^4.2.1", markers = "extra == 'web3v6'"}
]
#py-evm = [
#    {version = "^0.12.1b1", markers = "extra != 'web3v6'"},
#    {version = "^v0.10.1-beta.2", markers = "extra == 'web3v6'"}
#]


[tool.poetry.group.dev.dependencies]
ruff = "^0.11.13"
coloredlogs = "^15.0.1"
pytest = "^7.4.3"
pytest-mock = "^3.7.0"
ipdb = "^0.13.9"
flaky = "^3.7.0"

# See discussion https://github.com/python-poetry/poetry/issues/3348#issuecomment-726534462
[tool.poetry.extras]
docs = ["Sphinx", "sphinx-rtd-theme", "sphinx-sitemap", "sphinx-autodoc-typehints", "furo", "nbsphinx", "zope.dottedname", "sphinx-sitemap", "sphinx-rtd-theme"]
data = ["jupyter", "tqdm", "pandas", "gql", "matplotlib", "plotly", "pyarrow", "numpy", "tenacity", "kaleido", "ffn"]
test = ["pytest-xdist"]
hypersync = ["hypersync"]
#tester = ["eth-tester"]
# To install the web3py version based dependencies
web3v6 = ["eth-tester", "evm-trace", "safe-eth-py", "eth-pydantic-types", "multicall", "eth-account", "eth-typing"]
web3v7 = ["eth-tester", "evm-trace", "safe-eth-py", "eth-pydantic-types", "multicall", "eth-account", "eth-typing"]



[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
addopts = "--capture=no --tb=native"

# Do not let pytest to crawl into contracts/ subprojects
# that contain tests and are independent from us
# https://stackoverflow.com/a/58306308/315168
norecursedirs="contracts/*"

filterwarnings = [
    "ignore::DeprecationWarning:pkg_resources.*:",
    "ignore::DeprecationWarning:eth_tester.*:",
]

[tool.ruff]
# We hate arbitrary line lengths
line-length = 999
indent-width = 4
extend-exclude = ["*.ipynb"]

[tool.ruff.lint]
# Enable preview features & checks (use with caution)
preview = true
extend-select = [ # features in preview
    "W292", # missing-newline-at-end-of-file
]
select = [
    "A",     # flake8-builtins
    "ARG",   # flake8-unused-arguments
    "B",     # flake8-bugbear
    "C",     # mccabe
    "COM",   # flake8-commas (enforces trailing commas)
    "DTZ",   # flake8-datetimez
    "E",     # pycodestyle errors
    "EM",    # flake8-errmsg
    "F",     # Pyflakes
    "FBT",   # flake8-boolean-trap
    "ICN",   # flake8-import-conventions
    "ISC",   # flake8-implicit-str-concat
    "I",     # isort
    "N",     # pep8-naming
    "PLC",   # Pylint Convention
    "PLE",   # Pylint Error
    "PLR",   # Pylint Refactor
    "PLW",   # Pylint Warning
    "Q",     # flake8-quotes
    "RUF",   # Ruff-specific rules
    "S",     # flake8-bandit
    "T",     # flake8-debugger
    "TID",   # flake8-tidy-imports
    "UP",    # pyupgrade
    "W",     # pycodestyle warnings
    "YTT",   # flake8-2020
    "RUF100", # Automatically remove unused # noqa directives,
]

ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105", "S106", "S107",
    # Ignore complexity
    "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
    "PLC1901", # empty string comparisons
    "PLW2901", # `for` loop variable overwritten
    "SIM114", # Combine `if` branches using logical `or` operator
    "E203", # Whitespace before :, needed for black compatibility and also `ruff format`
    "ISC001", # causes unexpected behaviour with formatter,
    "COM812", # Trailing comma missing - conflicts with formatter
]

[tool.ruff.lint.isort]
# Configure import sorting
known-first-party = ["eth_defi"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"


[tool.ruff.format]
# Force function parameters to cascade when they don't fit on one line
# This makes ruff more aggressive about splitting long function calls/definitions
skip-magic-trailing-comma = false  # Respect trailing commas to force multi-line
docstring-code-format = true       # Format code blocks in docstrings
indent-style = "space"

# NOTE: Still under development. Ref: https://github.com/astral-sh/ruff/issues/6606
#[tool.ruff.lint.pydocstyle]
## Use Sphinx docstring convention
#convention = "sphinx"

[tool.poetry.scripts]
install-aave-for-testing = 'eth_defi.aave_v3.deployer:install_aave_for_testing'
